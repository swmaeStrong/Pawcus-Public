name: Test Build and Release

on:
  push:
    tags:
      - 'test-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Test release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for pre-built app in Archives
      id: check_archives
      run: |
        # Find any .app in Archives folder
        APP_NAME=$(find ./Archives -name "*.app" -type d | head -n 1)
        if [ -n "$APP_NAME" ]; then
          echo "prebuilt_exists=true" >> $GITHUB_OUTPUT
          echo "app_path=$APP_NAME" >> $GITHUB_OUTPUT
          echo "✅ Found pre-built app: $APP_NAME"
        else
          echo "prebuilt_exists=false" >> $GITHUB_OUTPUT
          echo "❌ No .app found in Archives folder"
          ls -la ./Archives/
          exit 1
        fi
    
    - name: Setup version and build number
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=test-v$VERSION" >> $GITHUB_OUTPUT
        else
          VERSION="${GITHUB_REF#refs/tags/test-v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
        # Calculate build number: remove dots and convert to integer
        # e.g., 0.6.2 -> 62, 1.0.0 -> 100
        BUILD_NUMBER=$(echo "$VERSION" | sed 's/\.//g' | sed 's/^0*//')
        if [ -z "$BUILD_NUMBER" ]; then
          BUILD_NUMBER=1
        fi
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "Version: $VERSION, Build Number: $BUILD_NUMBER"
    
    - name: Create ZIP from pre-built app
      run: |
        mkdir -p ./Export
        APP_PATH=$(find ./Archives -name "*.app" -type d | head -n 1)
        APP_NAME=$(basename "$APP_PATH")
        cp -R "$APP_PATH" ./Export/
        
        cd ./Export
        ditto -c -k --sequesterRsrc --keepParent "$APP_NAME" ../Pomocore-Test.zip
        cd ..
    
    - name: Install create-dmg
      run: brew install create-dmg
    
    - name: Create styled DMG from pre-built app
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        DMG_NAME="Pomocore-Test-Installer-$VERSION.dmg"
        APP_PATH=$(find ./Archives -name "*.app" -type d | head -n 1)
        
        # create-dmg로 스타일링된 DMG 생성
        create-dmg \
          --volname "Pomocore Test Installer" \
          --window-pos 200 120 \
          --window-size 800 450 \
          --icon-size 100 \
          --icon "$(basename "$APP_PATH")" 200 190 \
          --hide-extension "$(basename "$APP_PATH")" \
          --app-drop-link 600 185 \
          --hdiutil-quiet \
          "$DMG_NAME" \
          "$APP_PATH"
        
        # 기존 파일명으로도 복사 (호환성 유지)
        cp "$DMG_NAME" "./Pomocore-Test.dmg"
        
        echo "STYLED_DMG_NAME=$DMG_NAME" >> $GITHUB_ENV
        
    - name: Download and setup Sparkle tools
      run: |
        curl -L -o Sparkle-2.7.0.tar.xz https://github.com/sparkle-project/Sparkle/releases/download/2.7.0/Sparkle-2.7.0.tar.xz
        tar -xf Sparkle-2.7.0.tar.xz
        
    - name: Setup EdDSA key and sign update
      id: sign_update
      env:
        SPARKLE_EDDSA_PRIVATE_KEY: ${{ secrets.SPARKLE_EDDSA_PRIVATE_KEY }}
      run: |
        if [ -n "$SPARKLE_EDDSA_PRIVATE_KEY" ]; then
          echo "Setting up EdDSA private key..."
          echo "$SPARKLE_EDDSA_PRIVATE_KEY" > ~/private_key.pem
          chmod 600 ~/private_key.pem
          
          # Debug: Check if files exist
          ls -la Pomocore-Test.zip
          ls -la ~/private_key.pem
          ls -la ./bin/sign_update
          
          # Sign the update
          echo "Signing update..."
          ./bin/sign_update Pomocore-Test.zip ~/private_key.pem > signature_output.txt 2>&1 || true
          echo "Sign command exit code: $?"
          cat signature_output.txt
          
          # Extract signature more carefully
          if grep -q 'sparkle:edSignature=' signature_output.txt; then
            SIGNATURE=$(grep 'sparkle:edSignature=' signature_output.txt | sed 's/.*sparkle:edSignature="\([^"]*\)".*/\1/')
            echo "Successfully extracted signature: $SIGNATURE"
            echo "signature=$SIGNATURE" >> $GITHUB_OUTPUT
          else
            echo "No signature found in output"
            echo "signature=" >> $GITHUB_OUTPUT
          fi
          
          # Clean up
          rm ~/private_key.pem
        else
          echo "No EdDSA private key provided, skipping signing"
          echo "signature=" >> $GITHUB_OUTPUT
        fi
        
    - name: Calculate checksums and file size
      id: sparkle_info
      run: |
        SHA=$(shasum -a 256 Pomocore-Test.zip | awk '{print $1}')
        SIZE=$(stat -f%z Pomocore-Test.zip)
        echo "sha256=$SHA" >> $GITHUB_OUTPUT
        echo "size=$SIZE" >> $GITHUB_OUTPUT
        shasum -a 256 Pomocore-Test.dmg > Pomocore-Test.dmg.sha256
        shasum -a 256 Pomocore-Test.zip > Pomocore-Test.zip.sha256
        
    - name: Generate Sparkle test-appcast.xml
      run: |
        SIGNATURE="${{ steps.sign_update.outputs.signature }}"
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "Received signature: '$SIGNATURE'"
        echo "Using minimum autoupdate version: 110"
        
        # GitHub Pages URL for test release notes
        RELEASE_NOTES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-release-notes/${VERSION}.html"
        
        if [ -n "$SIGNATURE" ] && [ "$SIGNATURE" != "" ] && [ "$SIGNATURE" != "null" ]; then
          echo "Creating test-appcast.xml with EdDSA signature"
          # With EdDSA signature
          cat > test-appcast.xml << EOF
        <?xml version="1.0" standalone="yes"?>
        <rss xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" version="2.0">
            <channel>
                <title>Pomocore Test</title>
                <language>en</language>
                <item>
                    <title>Test Version ${VERSION}</title>
                    <pubDate>$(date -u +"%a, %d %b %Y %H:%M:%S GMT")</pubDate>
                    <sparkle:minimumSystemVersion>14.0</sparkle:minimumSystemVersion>
                    <sparkle:minimumAutoupdateVersion>110</sparkle:minimumAutoupdateVersion>
                    <sparkle:releaseNotesLink>${RELEASE_NOTES_URL}</sparkle:releaseNotesLink>
                    <enclosure url="https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/Pomocore-Test.zip"
                              sparkle:version="${{ steps.version.outputs.build_number }}"
                              sparkle:shortVersionString="${VERSION}"
                              sparkle:edSignature="$SIGNATURE"
                              length="${{ steps.sparkle_info.outputs.size }}"
                              type="application/octet-stream" />
                </item>
            </channel>
        </rss>
        EOF
        else
          # Without EdDSA signature (not recommended for production)
          cat > test-appcast.xml << EOF
        <?xml version="1.0" standalone="yes"?>
        <rss xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" version="2.0">
            <channel>
                <title>Pomocore Test</title>
                <language>en</language>
                <item>
                    <title>Test Version ${VERSION}</title>
                    <pubDate>$(date -u +"%a, %d %b %Y %H:%M:%S GMT")</pubDate>
                    <sparkle:minimumSystemVersion>14.0</sparkle:minimumSystemVersion>
                    <sparkle:minimumAutoupdateVersion>110</sparkle:minimumAutoupdateVersion>
                    <sparkle:releaseNotesLink>${RELEASE_NOTES_URL}</sparkle:releaseNotesLink>
                    <enclosure url="https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/Pomocore-Test.zip"
                              sparkle:version="${{ steps.version.outputs.build_number }}"
                              sparkle:shortVersionString="${VERSION}"
                              length="${{ steps.sparkle_info.outputs.size }}"
                              type="application/octet-stream" />
                </item>
            </channel>
        </rss>
        EOF
        fi
        
    - name: Checkout release repo for test appcast update
      uses: actions/checkout@v4
      with:
        path: release-repo
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main
        
    - name: Update GitHub Pages with test-appcast.xml
      run: |
        echo "📤 Updating test-appcast.xml on GitHub Pages..."
        
        # Copy test-appcast.xml to release repo (NOT appcast.xml)
        cp test-appcast.xml release-repo/test-appcast.xml
        
        cd release-repo
        
        # Git 설정
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 현재 변경사항 확인
        if [ -f "test-appcast.xml" ]; then
          echo "✅ test-appcast.xml generated successfully"
          ls -la test-appcast.xml
          
          # GitHub Pages에 추가 (gitignore 무시)
          git add -f test-appcast.xml
          
          # 변경사항이 있는지 확인
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to test-appcast.xml"
          else
            echo "📝 Committing test-appcast.xml changes"
            git commit -m "Update test-appcast.xml for test version ${{ steps.version.outputs.version }}"
            git push origin main
          fi
        else
          echo "❌ test-appcast.xml not found"
          exit 1
        fi
        
    - name: Create Test Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Pomocore Test ${{ steps.version.outputs.version }}
        body: |
          ## Pomocore Test ${{ steps.version.outputs.version }}
          
          ⚠️ **THIS IS A TEST RELEASE** ⚠️
          
          This is a test version for internal testing purposes. Do not distribute to end users.
          
          ### Installation
          
          **Test Downloads:**
          - Download `Pomocore-Test.dmg` for test installer
          - Download `Pomocore-Test.zip` for test portable version
          
          ### Changes
          - Test build for deployment verification
          
          ### System Requirements
          - macOS 14.0 or later
          - Accessibility permissions required
          
        draft: false
        prerelease: true
        
    - name: Upload Test DMG
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Pomocore-Test.dmg
        asset_name: Pomocore-Test.dmg
        asset_content_type: application/octet-stream
        
    - name: Upload Test ZIP
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Pomocore-Test.zip
        asset_name: Pomocore-Test.zip
        asset_content_type: application/zip
        
    - name: Upload Test DMG checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Pomocore-Test.dmg.sha256
        asset_name: Pomocore-Test.dmg.sha256
        asset_content_type: text/plain
        
    - name: Upload Test ZIP checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Pomocore-Test.zip.sha256
        asset_name: Pomocore-Test.zip.sha256
        asset_content_type: text/plain
        
    - name: Upload test-appcast.xml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./test-appcast.xml
        asset_name: test-appcast.xml
        asset_content_type: application/xml