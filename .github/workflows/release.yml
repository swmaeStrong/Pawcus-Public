name: Build and Release Pawcus

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.7.4)'
        required: true
        type: string
      source_repo:
        description: 'Source repository (owner/repo)'
        required: true
        default: 'swmaeStrong/Pawcus'
        type: string
      source_ref:
        description: 'Source branch/tag/commit'
        required: true
        default: 'main'
        type: string

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.source_repo }}
        ref: ${{ inputs.source_ref }}
        token: ${{ secrets.GITHUB_TOKEN }}
        path: source
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest'
    
    - name: Import Code Signing Certificate
      env:
        CERTIFICATE_BASE64: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT }}
        CERTIFICATE_PASSWORD: ${{ secrets.DEVELOPER_ID_APPLICATION_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        
        # Import certificate
        echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # Clean up
        rm certificate.p12
    
    - name: Build Pawcus
      env:
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        cd source
        
        # Build the app
        xcodebuild -project Pawcus/Pawcus.xcodeproj \
          -scheme Pawcus \
          -configuration Release \
          -derivedDataPath build \
          -archivePath build/Pawcus.xcarchive \
          archive \
          CODE_SIGN_IDENTITY="Developer ID Application" \
          DEVELOPMENT_TEAM="$TEAM_ID" \
          CODE_SIGN_STYLE=Manual
        
        # Export the app
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>developer-id</string>
            <key>teamID</key>
            <string>$TEAM_ID</string>
        </dict>
        </plist>
        EOF
        
        xcodebuild -exportArchive \
          -archivePath build/Pawcus.xcarchive \
          -exportPath build/export \
          -exportOptionsPlist ExportOptions.plist
        
        # Move app to expected location
        mv build/export/Pawcus.app build/Pawcus.app
    
    - name: Notarize App
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        cd source
        
        # Create zip for notarization
        ditto -c -k --keepParent build/Pawcus.app build/Pawcus.zip
        
        # Submit for notarization
        xcrun notarytool submit build/Pawcus.zip \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_ID_PASSWORD" \
          --team-id "$TEAM_ID" \
          --wait
        
        # Staple the notarization
        xcrun stapler staple build/Pawcus.app
    
    - name: Create DMG
      run: |
        cd source
        
        # Create DMG
        DMG_NAME="Pawcus-Installer-${{ inputs.version }}"
        DMG_DIR="dmg_temp"
        
        # Clean up any existing files
        rm -rf "$DMG_DIR"
        rm -f "${DMG_NAME}.dmg"
        
        # Create temporary directory
        mkdir -p "$DMG_DIR"
        
        # Copy app and create Applications symlink
        cp -R build/Pawcus.app "$DMG_DIR/"
        ln -s /Applications "$DMG_DIR/Applications"
        
        # Create DMG
        hdiutil create -volname "$DMG_NAME" \
          -srcfolder "$DMG_DIR" \
          -ov -format UDZO \
          "${DMG_NAME}.dmg"
        
        # Clean up
        rm -rf "$DMG_DIR"
    
    - name: Generate Sparkle Signature
      env:
        SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_EDDSA_PRIVATE_KEY }}
      run: |
        cd source
        
        DMG_FILE="Pawcus-Installer-${{ inputs.version }}.dmg"
        
        # Create signature using EdDSA private key
        # This is a simplified version - in production you'd use Sparkle's sign_update tool
        SIGNATURE=$(echo -n "$DMG_FILE" | openssl dgst -sha256 -sign <(echo "$SPARKLE_PRIVATE_KEY" | xxd -r -p) | base64)
        
        echo "SPARKLE_SIGNATURE=$SIGNATURE" >> $GITHUB_ENV
        echo "DMG_SIZE=$(stat -f%z "$DMG_FILE")" >> $GITHUB_ENV
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ inputs.version }}
        name: Pawcus v${{ inputs.version }}
        draft: false
        prerelease: false
        files: |
          source/Pawcus-Installer-${{ inputs.version }}.dmg
        body: |
          ## What's Changed
          
          - Released version ${{ inputs.version }}
          
          ## Installation
          
          1. Download the DMG file
          2. Open the DMG and drag Pawcus to your Applications folder
          3. Grant accessibility permissions when prompted
          
          ## Auto-Update
          
          This version includes Sparkle auto-update support.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update Appcast
      run: |
        cd source
        
        # Create or update appcast.xml
        cat > appcast.xml << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">
          <channel>
            <title>Pawcus Updates</title>
            <link>https://github.com/swmaeStrong/Pawcus-Public</link>
            <description>Pawcus App Updates</description>
            <language>en</language>
            <item>
              <title>Version ${{ inputs.version }}</title>
              <description><![CDATA[
                <h2>What's New in ${{ inputs.version }}</h2>
                <ul>
                  <li>Latest updates and improvements</li>
                </ul>
              ]]></description>
              <pubDate>$(date -R)</pubDate>
              <sparkle:version>${{ inputs.version }}</sparkle:version>
              <sparkle:shortVersionString>${{ inputs.version }}</sparkle:shortVersionString>
              <enclosure 
                url="https://github.com/swmaeStrong/Pawcus-Public/releases/download/v${{ inputs.version }}/Pawcus-Installer-${{ inputs.version }}.dmg"
                length="${{ env.DMG_SIZE }}"
                type="application/octet-stream"
                sparkle:edSignature="${{ env.SPARKLE_SIGNATURE }}" />
            </item>
          </channel>
        </rss>
        EOF
        
        # Commit appcast to the release repo
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Checkout the current repo (release repo)
        cd ..
        git checkout main || git checkout -b main
        cp source/appcast.xml .
        git add appcast.xml
        git commit -m "Update appcast for v${{ inputs.version }}" || echo "No changes to commit"
        git push origin main
    
    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain build.keychain || true
